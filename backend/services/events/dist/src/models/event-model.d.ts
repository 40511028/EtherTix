import mongoose from "mongoose";
interface EventAttributes {
    name: string;
    summary: string;
    description: Object;
    event_url: string;
    startAt: Date;
    endsAt: Date;
    createdAt: Date;
    changedAt: Date;
    publishedAt: Date;
    event_status: string;
    currency: string;
    isOnline: boolean;
    event_logo: string;
    format: Object;
    category: Object;
    maxCapacity: number;
    minCapacity: number;
    showRemaining: boolean;
    ticketAvailability: Object;
    isSoldOut: boolean;
    searchable: boolean;
    hideStartDate: boolean;
    hideEndDate: boolean;
    isLocked: boolean;
    isFree: boolean;
    isPremium: boolean;
    eventSalesStatus: Object;
    organiser: mongoose.Schema.Types.ObjectId;
    venue: mongoose.Schema.Types.ObjectId;
    ticket: mongoose.Schema.Types.ObjectId;
    issue: mongoose.Schema.Types.ObjectId;
    review: mongoose.Schema.Types.ObjectId;
}
interface EventDocument extends mongoose.Model<EventAttributes> {
    name: string;
    summary: string;
    description: Object;
    event_url: string;
    startAt: Date;
    endsAt: Date;
    createdAt: Date;
    publishedAt: Date;
    changedAt: Date;
    event_status: string;
    currency: string;
    event_logo: string;
    isOnline: boolean;
    format: Object;
    category: Object;
    maxCapacity: number;
    minCapacity: number;
    showRemaining: boolean;
    ticketAvailability: Object;
    isSoldOut: boolean;
    searchable: boolean;
    hideStartDate: boolean;
    hideEndDate: boolean;
    isLocked: boolean;
    reservedSeating: boolean;
    isFree: boolean;
    eventSalesStatus: Object;
    isPremium: boolean;
    organiser: mongoose.Schema.Types.ObjectId;
    venue: mongoose.Schema.Types.ObjectId;
    ticket: mongoose.Schema.Types.ObjectId;
    issue: mongoose.Schema.Types.ObjectId;
    review: mongoose.Schema.Types.ObjectId;
}
declare const Event: mongoose.Model<EventDocument, {}, {}, {}, any>;
export { Event };
